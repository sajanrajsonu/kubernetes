################ Install minikube ################
sudo apt update
sudo apt install -y curl wget apt-transport-https
sudo apt install -y docker.io
sudo systemctl enable --now docker
curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
chmod +x minikube
sudo mv minikube /usr/local/bin/
curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
chmod +x kubectl
sudo mv kubectl /usr/local/bin/
minikube start --driver=docker --vm=true 
minikube status
minikube stop
minikube delete (optional)
################################
Follow github link to run dashboard - https://github.com/LondheShubham153/kubestarter/tree/main/kind-cluster
But instead of running "kubectl proxy" , run --> kubectl proxy --address=127.0.0.1 --accept-hosts='^.*$'
then open cmd on local machine , run --> ssh -L 8001:127.0.0.1:8001 <your-ubuntu-user>@<your-server-ip> ## nohup kubectl proxy --address=127.0.0.1 --accept-hosts='^.*$' > proxy.log 2>&1 & ##
example -  ssh -L 8001:127.0.0.1:8001 srs@135.222.41.69, OR

In powershell - Start-Process ssh -ArgumentList "-L", "8001:127.0.0.1:8001", "srs@135.222.41.69"

now, open browser and hit URL --> http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/
and enter token and Your dashboard open.
################################
sudo kill -9 $(pgrep -f 'kubectl proxy');
kubectl -n kubernetes-dashboard create token admin-user;
nohup kubectl proxy --address=127.0.0.1 --accept-hosts='^.*$' > proxy.log 2>&1 &


sudo kill -9 $(pgrep -f 'kubectl proxy') ; kubectl -n kubernetes-dashboard create token admin-user ; nohup kubectl proxy --address=127.0.0.1 --accept-hosts='^.*$' > proxy.log 2>&1 &
################################

kind create cluster --name=sjn-cluster --config=config.yml
kubectl cluster-info --context kind-sjn-cluster
kubectl config  use-context kind-sjn-cluster   <---   Setup to defult cluster

kubectl get nodes
kubectl get namespaces OR kubectl get ns
kubectl get pods
kubectl get pods -n kube-system

kubectl create ns nginx
kubectl run nginx --image=nginx -n nginx
kubectl get pods -n nginx
kubectl delete pod nginx -n nginx
kubectl delete ns nginx

kubectl apply -f pod.yml
kubectl delete -f pod.yml
kubectl exec -it nginx-pod -n nginx -- bash OR kubectl exec -it pod/nginx-pod -n nginx -- bash
kubectl describe pod/nginx-pod -n nginx

kubectl apply -f  deployment.yml
kubectl delete -f  deployment.yml
kubectl scale deployment/nginx-deployment -n nginx --replicas=5
kubectl get pods -n nginx -o wide
kubectl set image deployment/nginx-deployment -n nginx nginx=nginx:1.27.1

kubectl apply -f  replicasets.yml
kubectl delete -f  replicasets.yml
kubectl get replicasets -n nginx

kubectl apply -f  daemonsets.yml
kubectl delete -f  daemonsets.yml
kubectl get replicasets -n nginx

kubectl apply -f  job.yml
kubectl delete -f  job.yml
kubectl logs pod/demo-job-6mbh5 -n nginx

kubectl delete -f  cron-job.yml
kubectl apply -f  cron-job.yml
kubectl get cronjob -n nginx && kubectl get pods -n nginx
kubectl logs pod/minute-backup-29175614-knjvn -n nginx

kubectl apply -f  persistentvolume.yml
kubectl delete -f  persistentvolume.yml

kubectl apply -f  persistentvolumeclaim.yml
kubectl delete -f  persistentvolumeclaim.yml

sudo -E kubectl port-forward service/nginx-service -n nginx 82:80 --address=0.0.0.0

kubectl get nodes
# Taint 
kubectl taint node  <node-name> prod=true:NoSchedule
#Untaint or Tolerent
kubectl taint node  <node-name> prod=true:NoSchedule-

kubectl top node
kubectl top pod

## For minikube 
minikube addons enable metrics-server

## For KIND cluster
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
kubectl -n kube-system edit deployment metrics-server ## Edit
        - --kubelet-insecure-tls
        - --kubelet-preferred-address-types=InternalIP,Hostname,ExternalIP
kubectl -n kube-system rollout restart deployment metrics-server
kubectl get pods -n kube-system
kubectl top nodes
kubectl top pod -n nginx


curl https://apache-service.apache.svc.cluster.local

kubectl describe service/apache-service -n apache

sudo -E kubectl port-forward service/apache-service -n apache 82:80 --address=0.0.0.0
kubectl scale deployment apache-deployment -n apache --replicas=3


kubectl run -it load-generator --image=busybox -n apache
while true; do wget  -q -O- http://apache-service.apache.svc.cluster.local; done
kubectl delete pod/load-generator  -n apache

kubectl get pods -n apache -o wide

kubectl delete pod/load-generator  -n apache

kubectl auth whoami
kubectl auth can-i get pods
kubectl auth can-i get pods -n apache
kubectl auth can-i get deployment -n apache
kubectl auth can-i delete deployment -n apache

kubectl apply -f role.yml
kubectl get role -n apache

kubectl get serviceaccount
kubectl apply -f service-account.yml
kubectl get serviceaccount -n apache
kubectl auth can-i get pod -n apache
kubectl auth can-i get pod -n apache --as=apache-user

kubectl apply -f roll-binding.yml

kubectl auth can-i get pods --as=apache-user -n apache
kubectl auth can-i delete service --as=apache-user -n apache
kubectl auth can-i list service --as=apache-user -n apache

kubectl get clusterrole -n kubernetes-adashbaord
kubectl apply -f dashboard-admin-user.yml
kubectl -n kubernetes-dashboard create token admin-user
kubectl proxy --port=8001 --address=0.0.0.0 --accept-hosts='.*'  [[Only run in Linux OS]]

kubectl apply -f devops-crd.yml
kubectl get crd
kubectl apply -f devops-cr.yml 
kubectl get devopsbatches

curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
chmod 700 get_helm.sh
./get_helm.sh
helm version

helm create apache-helm
helm package .helm package .
helm package apache-helm/

helm install dev-apache apache-helm
helm uninstall dev-apache
helm install dev-apache apache-helm -n dev-apache --create-namespace

helm upgrade prd-apache ./apache-helm -n prd-apache
helm rollback prd-apache 1 -n prd-apache

helm create node-js-app
helm package node-js-app/
helm install dev-node-js-app node-js-app -n dev-node --create-namespace
kubectl port-forward svc/dev-node-js-app 8000:8000 -n dev-node --address=0.0.0.0

helm repo add bitnami https://charts.bitnami.com/bitnami
helm repo update
helm search repo mysql

helm repo add stable https://charts.helm.sh/stable
helm repo list
helm list












curl -L https://istio.io/downloadIstio | sh -
cd istio-1.26.2

kind create cluster --name istio-testing
kubectl cluster-info --context kind-istio-testing
kind get clusters
kubectl config get-contexts

istioctl install -f samples/bookinfo/demo-profile-no-gateways.yaml -y
kubectl label namespace default istio-injection=enabled
kubectl get namespace -L istio-injection
kubectl get crd gateways.gateway.networking.k8s.io &> /dev/null || \
{ kubectl kustomize "github.com/kubernetes-sigs/gateway-api/config/crd?ref=v1.3.0" | kubectl apply -f -; }

kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml
kubectl get services
kubectl get pods
kubectl exec "$(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}')" -c ratings -- curl -sS productpage:9080/productpage | grep -o "<title>.*</title>"

kubectl apply -f samples/bookinfo/gateway-api/bookinfo-gateway.yaml
kubectl annotate gateway bookinfo-gateway networking.istio.io/service-type=ClusterIP --namespace=default
kubectl get gateway
kubectl port-forward svc/bookinfo-gateway-istio 8080:80
Run on window cmd -> ssh -L 8080:127.0.0.1:8080 ubuntu@65.1.41.165

for i in $(seq 1 100); do curl -s -o /dev/null "http://localhost:8080/productpage"; done

kubectl apply -f samples/addons
kubectl rollout status deployment/kiali -n istio-system
istioctl dashboard kiali
Run on window cmd -> ssh -L 20001:127.0.0.1:20001 ubuntu@65.1.41.165

minikube start --driver=docker

------------------------------------------------------------------

docker build -t sajanrajsonu/chatapp-backend:latest .
docker images
docker push sajanrajsonu/chatapp-backend:latest
cd /home/ubuntu/kubernetes/projects/full-stack_chatApp/frontend
docker build -t sajanrajsonu/chatapp-frontend:latest .
docker push sajanrajsonu/chatapp-frontend:latest



kubectl port-forward service/backend -n chat-app 5001:5001
kubectl port-forward service/frontend -n chat-app 80:80


minikube addons enable ingress


kubectl port-forward service/ingress-nginx-controller -n ingress-nginx 80:80
------------------------------------------------------------------
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update

helm install prometheus-stack prometheus-community/kube-prometheus-stack -n monitoring --set prometheus.service.nodePort=30000 --set grafana.service.nodePort=31000 --set prometheus.service.type=NodePort --set grafana.service.type=NodePort

 kubectl get secret prometheus-stack-grafana -n monitoring -o jsonpath="{.data.admin-password}" | base64 --decode
 
AKIA2HVQ5FC2X2PNKKFX

TB0A3F5wUrikOkn296Va3wkM29Ev9Yn+R+OVDFKR
https://devops.tglserver.net/TMotions/CME-%20Order%20Automation%20(AI)/_git/CME_Order_Automation_AI


eksctl utils associate-iam-oidc-provider --region ap-south-1 --cluster sjn-cluster --approve
----------------------------------------------------------------
docker login -u sajanrajsonu
dckr_pat_bQ4NAywBh_11DDTJ093_V0cyldk